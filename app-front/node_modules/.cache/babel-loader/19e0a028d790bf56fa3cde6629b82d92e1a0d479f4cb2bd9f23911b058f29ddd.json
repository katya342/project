{"ast":null,"code":"var _jsxFileName = \"C:\\\\Proggramming\\\\app-front\\\\src\\\\components\\\\catalog\\\\CatalogPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport api from \"../../api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CatalogPage = () => {\n  _s();\n  const [catalogData, setCatalogData] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await api.get('/catalog');\n        if (response.data) {\n          setCatalogData(response.data.data); // Assuming your data is nested under the 'data' key\n        } else {\n          console.log(\"Response data is undefined:\", response);\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []); // Empty array as second parameter ensures this effect runs only once\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n_s(CatalogPage, \"7IefByf2QihcmOsPhz9XnQveyAg=\");\n_c = CatalogPage;\nexport default CatalogPage;\nvar _c;\n$RefreshReg$(_c, \"CatalogPage\");","map":{"version":3,"names":["React","useEffect","useState","api","jsxDEV","_jsxDEV","CatalogPage","_s","catalogData","setCatalogData","fetchData","response","get","data","console","log","error","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Proggramming/app-front/src/components/catalog/CatalogPage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\n\r\nimport api from \"../../api\";\r\n\r\nconst CatalogPage = () => {\r\n    const [catalogData, setCatalogData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const response = await api.get('/catalog');\r\n                if (response.data) {\r\n                    setCatalogData(response.data.data); // Assuming your data is nested under the 'data' key\r\n                } else {\r\n                    console.log(\"Response data is undefined:\", response);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching data:', error);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, []); // Empty array as second parameter ensures this effect runs only once\r\n\r\n    return (\r\n        <div></div>\r\n    );\r\n\r\n};\r\n\r\n\r\nexport default CatalogPage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAGlD,OAAOC,GAAG,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAElDD,SAAS,CAAC,MAAM;IACZ,MAAMS,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMR,GAAG,CAACS,GAAG,CAAC,UAAU,CAAC;QAC1C,IAAID,QAAQ,CAACE,IAAI,EAAE;UACfJ,cAAc,CAACE,QAAQ,CAACE,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC;QACxC,CAAC,MAAM;UACHC,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEJ,QAAQ,CAAC;QACxD;MACJ,CAAC,CAAC,OAAOK,KAAK,EAAE;QACZF,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAChD;IACJ,CAAC;IAEDN,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACIL,OAAA;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAU,CAAC;AAGnB,CAAC;AAACb,EAAA,CAxBID,WAAW;AAAAe,EAAA,GAAXf,WAAW;AA2BjB,eAAeA,WAAW;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}